---
version: "2.1"
services:
  freshrss:
    image: lscr.io/linuxserver/freshrss:latest
    container_name: freshrss
    depends_on:
      - freshrss-db
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=America/Chicago
    networks:
      - cloudflared
    volumes:
      - freshrss-config:/config
      - freshrss-extensions:/config/www/freshrss/extensions

  freshrss-db:
    image: postgres:alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=${FRESHRSS_DB_USER}
      - POSTGRES_PASSWORD=${FRESHRSS_DB_PASS}
      - POSTGRES_DB=${FRESHRSS_DB_NAME}
    networks:
      - cloudflared
    restart: unless-stopped
    volumes:
      - freshrss-db:/var/lib/postgresql/data

  nitter:
    image: quay.io/unixfox/nitter:latest
    container_name: nitter
    depends_on:
      - freshrss
      - nitter-redis
    environment:
      - REDIS_HOST=nitter-redis
      - NITTER_HOST=${NITTER_HOST}
    networks:
      - cloudflared
    restart: unless-stopped
    volumes:
      - nitter-config:/data

  nitter-redis:
    image: redis:6-alpine
    container_name: nitter-redis
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - cloudflared
    restart: unless-stopped
    volumes:
      - nitter-redis:/data

  invidious:
    # image: quay.io/invidious/invidious:latest
    image: quay.io/invidious/invidious:latest-arm64 # ARM64/AArch64 devices
    container_name: invidious
    restart: unless-stopped
    # ports:
    #   - "127.0.0.1:3000:3000"
    environment:
      # Please read the following file for a comprehensive list of all available
      # configuration options and their associated syntax:
      # https://github.com/iv-org/invidious/blob/master/config/config.example.yml
      INVIDIOUS_CONFIG: |
        db:
          dbname: invidious
          user: kemal
          password: kemal
          host: invidious-db
          port: 5432
        check_tables: true
        external_port: 443
        domain: ${INVIDIOUS_DOMAIN}
        https_only: true
        # statistics_enabled: false
        admins: [${INVIDIOUS_ADMIN}]
        registration_enabled: false
    depends_on:
      - invidious-db
    networks:
      - cloudflared

  invidious-db:
    image: docker.io/library/postgres:14
    container_name: invidious-db
    restart: unless-stopped
    volumes:
      - invidious-data:/var/lib/postgresql/data
      - invidious-config:/config/sql
      - ../invidious/docker/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
    environment:
      POSTGRES_DB: ${INVIDIOUS_DB_NAME}
      POSTGRES_USER: ${INVIDIOUS_DB_USER}
      POSTGRES_PASSWORD: ${INVIDIOUS_DB_PASS}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    networks:
      - cloudflared

  daily-backups:
    image: ghcr.io/krimil/freshrss-postgres-backup:master
    container_name: daily-backups
    depends_on:
      - freshrss-db
    environment:
      - TZ
      - BACKUP_DAYS
      - BACKUP_RCLONE_DEST
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - daily-backups:/backups
      - rclone-config:/config
      - freshrss:/freshrss

networks:
  cloudflared:
    external: true

volumes:
  daily-backups:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../../backups

  freshrss:
    driver_opts:
      type: none
      o: bind
      device: $PWD
  
  freshrss-config:
    driver_opts:
      type: none
      o: bind
      device: $PWD/config
      
  freshrss-db:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../freshrss-db

  freshrss-extensions:
    driver_opts:
      type: none
      o: bind
      device: $PWD/extensions

  invidious-config:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../invidious/config/sql
  
  invidious-data:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../invidious/db

  nitter-config:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../nitter/config
  
  nitter-redis:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../nitter-redis

  rclone-config:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../rclone/config
