---
version: "2.1"
services:
  freshrss:
    image: lscr.io/linuxserver/freshrss:latest
    container_name: freshrss
    depends_on:
      - freshrss-db
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - cloudflared
    volumes:
      - freshrss-config:/config
      - freshrss-extensions:/config/www/freshrss/extensions

  freshrss-db:
    image: postgres:alpine
    container_name: freshrss-db
    environment:
      - POSTGRES_USER=${FRESHRSS_DB_USER}
      - POSTGRES_PASSWORD=${FRESHRSS_DB_PASS}
      - POSTGRES_DB=${FRESHRSS_DB_NAME}
    networks:
      - cloudflared
    restart: unless-stopped
    volumes:
      - freshrss-db:/var/lib/postgresql/data

  invidious:
    # image: quay.io/invidious/invidious:latest
    image: quay.io/invidious/invidious:latest-arm64 # ARM64/AArch64 devices
    container_name: invidious
    depends_on:
      - invidious-db
    environment:
      # Please read the following file for a comprehensive list of all available
      # configuration options and their associated syntax:
      # https://github.com/iv-org/invidious/blob/master/config/config.example.yml
      INVIDIOUS_CONFIG: |
        db:
          dbname: invidious
          user: kemal
          password: kemal
          host: invidious-db
          port: 5432
        check_tables: true
        external_port: 443
        domain: ${INVIDIOUS_DOMAIN}
        https_only: true
        # statistics_enabled: false
        admins: [${INVIDIOUS_ADMIN}]
        registration_enabled: false
    networks:
      - cloudflared
    restart: unless-stopped

  invidious-db:
    image: docker.io/library/postgres:14
    container_name: invidious-db
    environment:
      POSTGRES_DB: ${INVIDIOUS_DB_NAME}
      POSTGRES_USER: ${INVIDIOUS_DB_USER}
      POSTGRES_PASSWORD: ${INVIDIOUS_DB_PASS}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    networks:
      - cloudflared
    restart: unless-stopped
    volumes:
      - invidious-db:/var/lib/postgresql/data

  # nitter:
  #   image: quay.io/unixfox/nitter:latest
  #   container_name: nitter
  #   depends_on:
  #     - freshrss
  #     - nitter-redis
  #   environment:
  #     - REDIS_HOST=nitter-redis
  #     - NITTER_HOST=${NITTER_HOST}
  #   networks:
  #     - cloudflared
  #   restart: unless-stopped
  #   volumes:
  #     - ./confs/nitter.conf:/data/nitter.conf

  # nitter-redis:
  #   image: redis:6-alpine
  #   container_name: nitter-redis
  #   command: redis-server --save 60 1 --loglevel warning
  #   networks:
  #     - cloudflared
  #   restart: unless-stopped
  #   volumes:
  #     - nitter-redis:/data

  daily-backups:
    image: ghcr.io/krimil/freshrss-stack-backups:master
    container_name: daily-backups
    depends_on:
      - freshrss-db
      - invidious-db
    environment:
      - TZ
      - BACKUP_DAYS
      - BACKUP_RCLONE_DEST
    networks:
      - cloudflared
    restart: always
    volumes:
      - /backups:/backups
      - ./confs/rclone.conf:/confs/rclone.conf
      - .env:/.env
      - /var/run/docker.sock:/var/run/docker.sock
    volumes_from:
      - freshrss-db
      - invidious-db

networks:
  cloudflared:
    external: true

volumes:
  freshrss-config:
  freshrss-db:
  freshrss-extensions:
  invidious-db:
  # nitter-redis:
